// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DAOCreated extends ethereum.Event {
  get params(): DAOCreated__Params {
    return new DAOCreated__Params(this);
  }
}

export class DAOCreated__Params {
  _event: DAOCreated;

  constructor(event: DAOCreated) {
    this._event = event;
  }

  get daoId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get daoTba(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get daoGovernor(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get daoUri(): string {
    return this._event.parameters[3].value.toString();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class DAOJoined extends ethereum.Event {
  get params(): DAOJoined__Params {
    return new DAOJoined__Params(this);
  }
}

export class DAOJoined__Params {
  _event: DAOJoined;

  constructor(event: DAOJoined) {
    this._event = event;
  }

  get member(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get daoId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OperatorSet extends ethereum.Event {
  get params(): OperatorSet__Params {
    return new OperatorSet__Params(this);
  }
}

export class OperatorSet__Params {
  _event: OperatorSet;

  constructor(event: OperatorSet) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class DAORegistry__configResultValue0Struct extends ethereum.Tuple {
  get appId(): Bytes {
    return this[0].toBytes();
  }

  get vault(): DAORegistry__configResultValue0VaultStruct {
    return changetype<DAORegistry__configResultValue0VaultStruct>(
      this[1].toTuple()
    );
  }
}

export class DAORegistry__configResultValue0VaultStruct extends ethereum.Tuple {
  get isImpersonationMode(): boolean {
    return this[0].toBoolean();
  }
}

export class DAORegistry__configOfResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: string;
  value4: BigInt;
  value5: Bytes;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: string,
    value4: BigInt,
    value5: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromFixedBytes(this.value5));
    return map;
  }

  getDaoId(): BigInt {
    return this.value0;
  }

  getDaotba(): Address {
    return this.value1;
  }

  getDaoGov(): Address {
    return this.value2;
  }

  getDaoURI(): string {
    return this.value3;
  }

  getTokenPrice(): BigInt {
    return this.value4;
  }

  getSismoGroupId(): Bytes {
    return this.value5;
  }
}

export class DAORegistry extends ethereum.SmartContract {
  static bind(address: Address): DAORegistry {
    return new DAORegistry("DAORegistry", address);
  }

  ADDRESSES_PROVIDER_V2(): Address {
    let result = super.call(
      "ADDRESSES_PROVIDER_V2",
      "ADDRESSES_PROVIDER_V2():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_ADDRESSES_PROVIDER_V2(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ADDRESSES_PROVIDER_V2",
      "ADDRESSES_PROVIDER_V2():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  APP_ID(): Bytes {
    let result = super.call("APP_ID", "APP_ID():(bytes16)", []);

    return result[0].toBytes();
  }

  try_APP_ID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("APP_ID", "APP_ID():(bytes16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  IS_IMPERSONATION_MODE(): boolean {
    let result = super.call(
      "IS_IMPERSONATION_MODE",
      "IS_IMPERSONATION_MODE():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_IS_IMPERSONATION_MODE(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "IS_IMPERSONATION_MODE",
      "IS_IMPERSONATION_MODE():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  SISMO_CONNECT_LIB_VERSION(): BigInt {
    let result = super.call(
      "SISMO_CONNECT_LIB_VERSION",
      "SISMO_CONNECT_LIB_VERSION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_SISMO_CONNECT_LIB_VERSION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SISMO_CONNECT_LIB_VERSION",
      "SISMO_CONNECT_LIB_VERSION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address, id: BigInt): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    owner: Address,
    spender: Address,
    id: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, id: BigInt, amount: BigInt): boolean {
    let result = super.call(
      "approve",
      "approve(address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_approve(
    spender: Address,
    id: BigInt,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approve",
      "approve(address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(owner: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  config(): DAORegistry__configResultValue0Struct {
    let result = super.call("config", "config():((bytes16,(bool)))", []);

    return changetype<DAORegistry__configResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_config(): ethereum.CallResult<DAORegistry__configResultValue0Struct> {
    let result = super.tryCall("config", "config():((bytes16,(bool)))", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<DAORegistry__configResultValue0Struct>(value[0].toTuple())
    );
  }

  configOf(param0: BigInt): DAORegistry__configOfResult {
    let result = super.call(
      "configOf",
      "configOf(uint256):(uint256,address,address,string,uint256,bytes16)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new DAORegistry__configOfResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toString(),
      result[4].toBigInt(),
      result[5].toBytes()
    );
  }

  try_configOf(
    param0: BigInt
  ): ethereum.CallResult<DAORegistry__configOfResult> {
    let result = super.tryCall(
      "configOf",
      "configOf(uint256):(uint256,address,address,string,uint256,bytes16)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DAORegistry__configOfResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toString(),
        value[4].toBigInt(),
        value[5].toBytes()
      )
    );
  }

  daotbaImplAddr(): Address {
    let result = super.call("daotbaImplAddr", "daotbaImplAddr():(address)", []);

    return result[0].toAddress();
  }

  try_daotbaImplAddr(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "daotbaImplAddr",
      "daotbaImplAddr():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decimals(param0: BigInt): i32 {
    let result = super.call("decimals", "decimals(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toI32();
  }

  try_decimals(param0: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  governanceDeployer(): Address {
    let result = super.call(
      "governanceDeployer",
      "governanceDeployer():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_governanceDeployer(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "governanceDeployer",
      "governanceDeployer():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isOperator(owner: Address, spender: Address): boolean {
    let result = super.call(
      "isOperator",
      "isOperator(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBoolean();
  }

  try_isOperator(
    owner: Address,
    spender: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isOperator",
      "isOperator(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  registry6551(): Address {
    let result = super.call("registry6551", "registry6551():(address)", []);

    return result[0].toAddress();
  }

  try_registry6551(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry6551", "registry6551():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  setOperator(spender: Address, approved: boolean): boolean {
    let result = super.call("setOperator", "setOperator(address,bool):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromBoolean(approved)
    ]);

    return result[0].toBoolean();
  }

  try_setOperator(
    spender: Address,
    approved: boolean
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setOperator",
      "setOperator(address,bool):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromBoolean(approved)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(daoId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(daoId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(daoId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(daoId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalDAOs(): BigInt {
    let result = super.call("totalDAOs", "totalDAOs():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalDAOs(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalDAOs", "totalDAOs():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(id: BigInt): BigInt {
    let result = super.call("totalSupply", "totalSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_totalSupply(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupply",
      "totalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(receiver: Address, id: BigInt, amount: BigInt): boolean {
    let result = super.call(
      "transfer",
      "transfer(address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transfer(
    receiver: Address,
    id: BigInt,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transfer",
      "transfer(address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(
    sender: Address,
    receiver: Address,
    id: BigInt,
    amount: BigInt
  ): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    receiver: Address,
    id: BigInt,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  verifyZKP(zkp: Bytes, to: Address, amount: BigInt, groupId: Bytes): boolean {
    let result = super.call(
      "verifyZKP",
      "verifyZKP(bytes,address,uint256,bytes16):(bool)",
      [
        ethereum.Value.fromBytes(zkp),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromFixedBytes(groupId)
      ]
    );

    return result[0].toBoolean();
  }

  try_verifyZKP(
    zkp: Bytes,
    to: Address,
    amount: BigInt,
    groupId: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyZKP",
      "verifyZKP(bytes,address,uint256,bytes16):(bool)",
      [
        ethereum.Value.fromBytes(zkp),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromFixedBytes(groupId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _registry6551(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _daotbaImplAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _governanceDeployer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CreateDAOCall extends ethereum.Call {
  get inputs(): CreateDAOCall__Inputs {
    return new CreateDAOCall__Inputs(this);
  }

  get outputs(): CreateDAOCall__Outputs {
    return new CreateDAOCall__Outputs(this);
  }
}

export class CreateDAOCall__Inputs {
  _call: CreateDAOCall;

  constructor(call: CreateDAOCall) {
    this._call = call;
  }

  get daoUri(): string {
    return this._call.inputValues[0].value.toString();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get daoType(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class CreateDAOCall__Outputs {
  _call: CreateDAOCall;

  constructor(call: CreateDAOCall) {
    this._call = call;
  }
}

export class JoinDAOCall extends ethereum.Call {
  get inputs(): JoinDAOCall__Inputs {
    return new JoinDAOCall__Inputs(this);
  }

  get outputs(): JoinDAOCall__Outputs {
    return new JoinDAOCall__Outputs(this);
  }
}

export class JoinDAOCall__Inputs {
  _call: JoinDAOCall;

  constructor(call: JoinDAOCall) {
    this._call = call;
  }

  get daoId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class JoinDAOCall__Outputs {
  _call: JoinDAOCall;

  constructor(call: JoinDAOCall) {
    this._call = call;
  }
}

export class SetConfigDaoCall extends ethereum.Call {
  get inputs(): SetConfigDaoCall__Inputs {
    return new SetConfigDaoCall__Inputs(this);
  }

  get outputs(): SetConfigDaoCall__Outputs {
    return new SetConfigDaoCall__Outputs(this);
  }
}

export class SetConfigDaoCall__Inputs {
  _call: SetConfigDaoCall;

  constructor(call: SetConfigDaoCall) {
    this._call = call;
  }

  get daoId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sismoGroupId(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get daoURI(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class SetConfigDaoCall__Outputs {
  _call: SetConfigDaoCall;

  constructor(call: SetConfigDaoCall) {
    this._call = call;
  }
}

export class SetOperatorCall extends ethereum.Call {
  get inputs(): SetOperatorCall__Inputs {
    return new SetOperatorCall__Inputs(this);
  }

  get outputs(): SetOperatorCall__Outputs {
    return new SetOperatorCall__Outputs(this);
  }
}

export class SetOperatorCall__Inputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetOperatorCall__Outputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
